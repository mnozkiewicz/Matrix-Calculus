import numpy as np
from typing import Union


def createRandomMatrix(a: int, b: int) -> Matrix: ...

def matrixToNumpy(matrix: Matrix) -> np.ndarray: ...

def numpyToMatrix(np_array: np.ndarray) -> Matrix: ...

def _binet(mat1: Matrix, mat2: Matrix) -> Matrix: ...

def _strassen(mat1: Matrix, mat2: Matrix) -> Matrix: ...

def _hybrid(mat1: Matrix, mat2: Matrix, l: int) -> Matrix: ...

def gauss(mat1: Matrix, mat2: Matrix) -> Matrix: ...

def gauss_pivoting(mat1: Matrix, mat2: Matrix) -> Matrix: ...

def LU(mat: Matrix) -> tuple[Matrix, Matrix]: ...

def LU_pivoting(mat: Matrix) -> tuple[Matrix, Matrix, Matrix]: ...


class Matrix:
    def __init__(self, height: int, width: int, value: float) -> None: ...
    
    def getHeight(self) -> int: ...
    
    def getWidth(self) -> int: ...

    def __repr__(self) -> None: ...

    def __add__(self, other: Union['Matrix', float]) -> 'Matrix': ...

    def __sub__(self, other: Union['Matrix', float]) -> 'Matrix': ...

    def __mul__(self, other: Union['Matrix', float]) -> 'Matrix': ...

    def __matmul__(self, other: 'Matrix') -> 'Matrix': ...

    def copy(self) -> 'Matrix': ...

    def transpose(self) -> 'Matrix': ...